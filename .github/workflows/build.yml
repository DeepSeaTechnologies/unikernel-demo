name: Buildandsign

on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string
      unikernel:
        required: true
        type: string
      hypervisor:
        required: true
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true
      aws_region:
        required: true
      aws_bucket:
        required: true

      harbor_secret:
        required: true
      harbor_user:
        required: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout


jobs:
  buildunikernel:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup previous jobs
      run: |
        echo "Cleaning up previous runs"
        sudo rm -rf ${{ github.workspace }}/*
        sudo rm -rf ${{ github.workspace }}/.??*

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: nubificus/app-httpreply
        ref: nbfc-knative-upd

    - name: Build unikraft HTTPreply
      run: |
        sudo apt update && sudo apt install -y --no-install-recommends \
        build-essential \
        sudo \
        gcc-aarch64-linux-gnu \
        libncurses-dev \
        libyaml-dev \
        flex \
        bison \
        git \
        wget \
        uuid-runtime \
        qemu-kvm \
        qemu-system-x86 \
        qemu-system-arm \
        sgabios
        sudo apt  update && sudo apt install -y bison flex unzip
        git clone https://github.com/unikraft/unikraft .unikraft/unikraft -b RELEASE-0.15.0
        git clone https://github.com/unikraft/lib-lwip .unikraft/libs/lwip -b RELEASE-0.15.0
        #LOCALARCH=$(uname -m | sed s/aarch64/arm64/)
        LOCALARCH=$(uname -m)
        echo "LOCALARCH=$LOCALARCH"
        UK_DEFCONFIG=$(pwd)/.config.${{ inputs.unikernel}}_${{ inputs.hypervisor }}-$LOCALARCH make defconfig
        if [[ "${{inputs.matrix }}" == "aarch64" ]]
        then
          cd .unikraft/unikraft
          patch -p1 < ../../patch.txt
          cd ../../
        fi
        make -j $(nproc)
        mkdir artifact
        LOCALARCH=$(uname -m | sed s/aarch64/arm64/)
        cp build/${{ inputs.unikernel }}_${{ inputs.hypervisor }}-$LOCALARCH artifact/${{ inputs.unikernel }}_${{ inputs.hypervisor }}-${{ inputs.matrix}}
        pwd
        echo "GitHub WorkSpace: ${{ github.workspace }}"
        ls -lacrt artifact

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload artifacts to GitHub Storage
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: ${{ github.workspace }}/artifact/${{ inputs.unikernel }}_${{ inputs.hypervisor }}-${{ inputs.matrix }}
        retention-days: 1

    - name: Upload to S3 bucket
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl bucket-owner-full-control --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SOURCE_DIR: '${{  github.workspace }}/artifact'
        DEST_DIR: 'bima-${{ inputs.hypervisor }}-${{ inputs.matrix }}'

  buildimage:
    runs-on: ubuntu-latest
    needs: [buildunikernel]
    container:
      image: harbor.nbfc.io/nubificus/bima-test:latest
      options: --privileged -e GITHUB_ENV -e GITHUB_OUTPUT -e GITHUB_PATH -e GITHUB_STATE -e GITHUB_STEP_SUMMARY

    outputs:
      hash: ${{ steps.build-image.outputs.hash }}
      tags: ${{ steps.build-image.outputs.tags }}
    
    steps:
    - name: Download bima
      run: |
        curl -L -o /tmp/bima https://bima-unikernel.s3.amazonaws.com/bima-${{ inputs.hypervisor }}-${{ inputs.matrix }}/${{ inputs.unikernel }}_${{ inputs.hypervisor }}-${{ inputs.matrix }}
    
#    - name: Make bima executable
#      run: |
#        ls -la /tmp/bima
#        ls -la /tmp/
#        chmod +x /tmp/bima 
#        mv /tmp/bima /usr/local/bin/bima
#
#    - name: Setup params
#      shell: bash
#      run: |
#        if [[ "${{inputs.hypervisor}}" != "fc" ]]
#        then
#          echo "HYPERVISOR=${{ inputs.hypervisor }}" >> $GITHUB_ENV
#          echo "cmdlineparam=" >> $GITHUB_ENV
#        else
#          echo "HYPERVISOR=firecracker" >> $GITHUB_ENV
#          echo "cmdlineparam=\"mydummyapp mydummyoption\"" >> $GITHUB_ENV
#        fi
#
#        echo "hypervisor: ${{ env.HYPERVISOR }}"
#        echo "cmdline: ${{ env.cmdlineparam }}"
#
#
#
#    - name: Start containerd service
#      run: systemctl enable containerd.service --now
#
#    - name: Prepare image
#      run: |
#        cd /tmp && mkdir -p job && cd job
#        curl -L -o ${{ inputs.unikernel }}_${{ inputs.hypervisor }}-${{ inputs.matrix }} https://s3.nubificus.co.uk/bima/${{ inputs.matrix }}/${{ inputs.unikernel }}_${{ inputs.hypervisor }}-${{ inputs.matrix }}/${{ inputs.unikernel }}_${{ inputs.hypervisor }}-${{ inputs.matrix }}
#
#        echo "hypervisor: ${{ env.HYPERVISOR }}"
#        echo "cmdline: ${{ env.cmdlineparam }}"
#
#        tee Containerfile > /dev/null <<EOT
#        FROM scratch
#        COPY ${{ inputs.unikernel }}_${{ inputs.hypervisor}}-${{ inputs.matrix }} /unikernel/httpreply-unikraft
#        LABEL "com.urunc.unikernel.binary"="/unikernel/httpreply-unikraft"
#        LABEL "com.urunc.unikernel.cmdline"=${{ env.cmdlineparam }}
#        LABEL "com.urunc.unikernel.unikernelType"="unikraft"
#        LABEL "com.urunc.unikernel.hypervisor"=${{ env.HYPERVISOR }}
#        EOT
#
#    - name: Build image
#      id: build-image
#      #continue-on-error: true
#      run: |
#        TAGS=harbor.nbfc.io/nubificus/${{ inputs.unikernel }}-${{inputs.hypervisor}}:${{ inputs.matrix }}
#        HASH=$(bima build -t $TAGS -f /tmp/job/Containerfile /tmp/job)
#        echo $HASH
#        echo "======================"
#        ctr image push $TAGS -u 'robot$unikraft:0jPGUiOCyvlJyBpTu51zI1ET17U9oSMd'
#        echo "hash=$HASH" >> $GITHUB_OUTPUT
#        echo "tags=$TAGS" >> $GITHUB_OUTPUT

#  sign:
#    runs-on: [self-hosted, "${{ inputs.matrix }}" ]
#    needs: [buildimage]
#    steps:
#    
#    - name: Find SHA
#      run: |
#        if [[ "${{github.event.pull_request.head.sha}}" != "" ]]
#        then
#          echo "ARTIFACT_SHA=$(echo ${{github.event.pull_request.head.ref}})" >> $GITHUB_ENV
#        else
#          echo "ARTIFACT_SHA=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
#        fi
#        echo "output: ${{ needs.buildimage.outputs.hash }}"
#        echo "output: ${{ needs.buildimage.outputs.tags }}"
#
#    - name: Install Cosign
#      uses: sigstore/cosign-installer@v3.1.1
#
#    - name: Login to Harbor
#      uses: docker/login-action@v2
#      with:
#        registry: harbor.nbfc.io/nubificus
#        username: ${{ secrets.harbor_user }}
#        password: ${{ secrets.harbor_secret }}
#
#    - name: Check install!
#      run: cosign version
#
#    - name: Sign the published Docker image
#      env:
#        COSIGN_EXPERIMENTAL: "true"
#        DIGEST: ${{ needs.buildimage.outputs.hash}}
#        TAGS: ${{ needs.buildimage.outputs.tags }}
#      run: |
#        cosign sign --yes harbor.nbfc.io/nubificus/${{ inputs.unikernel }}-${{inputs.hypervisor}}@${{ env.DIGEST }} \
#        -a "repo=${{github.repository}}" \
#        -a "workflow=${{github.workflow}}" \
#        -a "ref=${{github.sha}}" \
#        -a "author=Nubificus LTD"
